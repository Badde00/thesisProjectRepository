The logic for computing the LCS (Longest Common Subsequence) Length isn't implemented correctly.

1. The initialization block is correct, where a hashmap is initialized with 0 for every character pair. 

2. In the 2nd loop, the check for a character match between strings `s` and `t` is correct, but the subsequent processing is incorrect. For LCS, if there's a match found at positions `i` in `s` and `j` in `t`, then `dp[i][j]` should be `dp[i-1][j-1] + 1`, provided `i-1` and `j-1` are valid. Also, if there's no match, `dp[i][j]` should be `Max(dp[i-1][j], dp[i][j-1])`, but this isn't being done.

3. The final maximization should be done over the last row of the DP table, not the maximum of each row.

Here's the corrected version:

```java
import java.util.*;

public class LCS_LENGTH {
    public static Integer lcs_length(String s, String t) {
        if (s == null || t == null) return 0;
        int m = s.length(), n = t.length();

        int[][] dp = new int[m+1][n+1];

        for (int i=0; i <= m; i++) {
            for (int j=0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                } else if (s.charAt(i-1) == t.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] +1;
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }

        return dp[m][n];
    }
}
```

This revised code correctly calculates the longest common subsequence length. Instead of using a HashMap, it utilizes a 2D array dp where `dp[i][j]` will hold the length of the longest common subsequence between `s[0..i-1]` and `t[0..j-1]`. It then utilizes the standard LCS algorithm to populate dp and finally return `dp[m][n]`, which gives the LCS length for the complete strings `s` and `t`.

----- another analysis -----
The given code doesn't have any specific syntax errors. However, it doesn't properly calculate the Longest Common Subsequence (LCS) due to a logical discrepancy in the matrix initialization and update process.

Specifically, the code doesn't update the matrix appropriately when the characters of the two strings don't match. It also fails to properly consider all possible combinations of substrings, and only checks for matches at equivalent character positions.

Here is the corrected and more simplified version using dynamic programming:

```java
public class LCS_LENGTH {
    public static int lcs_length(String s, String t) {
        int m = s.length();
        int n = t.length();
        int[][] dp = new int[m + 1][n + 1];

        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if(i==0 || j==0){
                    dp[i][j] = 0;
                }
                else if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
}
```

This version correctly determines the LCS length by constructing a 2D table dp in bottom-up fashion, using nested loops over the length of both input strings (`s` and `t`). For every pair of indices, it checks the equality of characters, appropriately updates the LCS length, and utilizes previously stored results.
----- another analysis -----
This code has two logical issues:

1. In the main logic of comparing characters of strings s and t, it only checks whether character at index i in string s equals the character at index j in string t. It doesn't consider the situation where strings[i]!=t[j], which could form a longer subsequence if both strings[i+1] and t[j+1] are equal.
2. The initial setup of dynamic programming 2d-dp array to 0 leads to an error for the following reason: when comparing s.charAt(i) and t.charAt(j) in the second nested loop, it attempts to fetch the value from dp[i-1][j]. But when i-1=-1, it can't get the correct value from the HashMap and thus fails to form a longest common subsequence.

Here is the corrected version of the code:

```java
import java.util.*;

public class LCS_LENGTH {
    public static Integer lcs_length(String s, String t) {
        if (s == null || t == null) {
            return 0;
        }

        int m = s.length() + 1;
        int n = t.length() + 1;
        int[][] dp = new int[m][n];

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (s.charAt(i-1) == t.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }

        return dp[m-1][n-1];
    }
}
```

Explanation: Changed the HashMap to a 2D array, shifted indices by 1 to handle the "i-1" or "j-1" situation, and added condition to handle case where characters at corresponding indexes are not equal.
----- another analysis -----
Here are the errors present in the above Java code:

1. In the second nested loop where we process the strings, the code updates dp[i][j] when s.charAt(i) == t.charAt(j), but it does not handle the case where s.charAt(i) != t.charAt(j). We need to make dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) for this condition.

2. Once all the dp values are updated, the method returns the max value among the last row of the dp table. However, the LCS length is the value at dp[s.length()][t.length()].

Corrected code should look like this:

```java
import java.util.*;

public class LCS_LENGTH {
    public static Integer lcs_length(String s, String t) {

        Map<Integer, Map<Integer, Integer>> dp = new HashMap<>();

        for (int i = 0; i <= s.length(); i++) {
            dp.put(i, new HashMap<>());
            for (int j = 0; j <= t.length(); j++) {
                dp.get(i).put(j, 0);
            }
        }

        for (int i = 1; i <= s.length(); i++) {
            for (int j = 1; j <= t.length(); j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp.get(i).put(j, dp.get(i - 1).get(j - 1) + 1);
                } else {
                    dp.get(i).put(j, Math.max(dp.get(i - 1).get(j), dp.get(i).get(j - 1)));
                }
            }
        }

        return dp.get(s.length()).get(t.length());
    }
}
```

In this corrected version, the dp 2D index map now has a size of (s.length() + 1) x (t.length() + 1), initialized to be 0. The code accordingly updates the dp[i][j] values based on whether s.charAt(i - 1) equals t.charAt(j - 1), and eventually returns the value at dp[s.length()][t.length()] as the longest common subsequence length.
----- another analysis -----
The provided code has a logical error:

Error: 
The approach towards the problem of finding the Longest Common Subsequence (LCS) is incorrect. The provided code is not considering the case when characters at index `i` and `j` are not matching, `s.charAt(i) != t.charAt(j)`. In that case, we should have to retain the maximum value, found so far from `dp[i-1][j]` and `dp[i][j-1]`.

Correction: 
The corrected version with respect to the above issue would be:

```java
import java.util.*;

public class LCS_LENGTH {
    
    public static Integer lcs_length(String s, String t) {

        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();

        for (int i=0; i <= s.length(); i++) {
            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();
            dp.put(i, initialize);
            for (int j=0; j <= t.length(); j++) {
                Map<Integer,Integer> internal_map = dp.get(i);
                internal_map.put(j,0);
                dp.put(i, internal_map);
            }
        }

        for (int i=1; i <= s.length(); i++) {
            for (int j=1; j <= t.length(); j++) {
                if (s.charAt(i-1) == t.charAt(j-1)) {
                    dp.get(i).put(j, dp.get(i-1).get(j-1) + 1);
                } else {
                    dp.get(i).put(j, Math.max(dp.get(i-1).get(j), dp.get(i).get(j-1)));
                }
            }
        }

        return dp.get(s.length()).get(t.length());
    }
} 
```

The corrected version has an extra cell in both dimensions of the `dp` matrix for handling base case in a more convenient way. Also it directly returns the value at `dp[s.length()][t.length()]` which is the length of the longest common subsequence.
----- another analysis -----
